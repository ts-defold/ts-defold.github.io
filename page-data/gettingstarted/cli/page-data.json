{"componentChunkName":"component---src-layouts-index-js","path":"/gettingstarted/cli","result":{"data":{"site":{"siteMetadata":{"title":"ts-defold","docsLocation":"https://github.com/ts-defold/ts-defold.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"7fa676a6-3a75-5c00-b56b-eb1d2401ce7f","title":"Project Generator","slug":"/gettingstarted/cli"},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Project Generator\",\n  \"order\": 1\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst HeroImage = makeShortcode(\"HeroImage\");\nconst Tip = makeShortcode(\"Tip\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"br\", null), mdx(HeroImage, {\n    src: \"/assets/ts-defold-create.png\",\n    width: \"602\",\n    height: \"433\",\n    mdxType: \"HeroImage\"\n  }), mdx(Tip, {\n    mdxType: \"Tip\"\n  }, \"npm init @ts-defold ./project-name\"), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, `Requirements 🏷️`), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, `NodeJS version `, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `v14.16.0`), ` or higher`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `npm`))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, `Guide 📖`)), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, `Project Structure`), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `@ts-defold/create`)), ` templates follow this common directory structure`), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, `├─ .prettierrc.json      # Configuration for prettier code formatting\n├─ eslint.config.mjs     # Eslint configured to handle the caveats of TSTL & ts-defold\n├─ package.json          # NPM package dependencies and metadata\n├─ tsconfig.json         # TypeScript compiler configuration for TSTL & ts-defold\n│\n├─ .github/              # Github workflows and automation [optional]\n├─ .vscode/              # Settings, extensions, and tasks for Visual Studio Code\n├─ @types/               # Type definitions for your project and native extensions\n│\n├─ app/                  # The Defold game project\n│  ├─ lualib_bundle.lua  # TypeScript support library\n│  ├─ modules/           # Transpiled shared lua modules\n│  ├─ scripts/           # Transpiled Defold game scripts (lua)\n│\n├─ src/                  # TypeScript src files [edit these]\n│  ├─ modules/           # Shared modules\n│  ├─ scripts/           # Defold game scripts\n`))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, `@ts-defold/create init`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `Initialize a new `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` app at the specified path. This command will use the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ts-defold/tsd-template\"\n  }, `tsd-template`), ` to initialize the project by default.`), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `npm init @ts-defold [path] [--template] [template-name]\n`)), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `path`), ` - path where the new project will be initialized. This should be either a new or empty directory when creating a project.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `--template`), ` - The template to use to initialize the project with. The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `template-name`), ` refers to the shortname of a template that is `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/topics/ts-defold-template\"\n  }, `hosted on Github`), `. `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `i.e. tsd-template-war-battles -> war-battles`))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, `Steps the CLI Takes`), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `@ts-defold/create`)), ` is a helper to automate the steps needed when starting a\nnew `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` project. These steps can be done manually as well if you prefer\nto fork a template and go from there.`), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Create a new project directory `), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Download a template archive from Github`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Extract the archive`, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, `Clone or fork if you prefer`)))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Update the package.json with your unique project info`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Run `, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `npm ci`), ` to initialize the project using exact versions`, mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `*`, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, `npm install`), ` also works 😉`))))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#requirements-label","title":"Requirements :label:"},{"url":"#guide-book","title":"Guide :book:","items":[{"url":"#project-structure","title":"Project Structure"},{"url":"#ts-defoldcreate-init","title":"@ts-defold/create init"}]},{"url":"#steps-the-cli-takes","title":"Steps the CLI Takes"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"gettingstarted/cli.md","fields":{"gitLogLatestAuthorName":"Nathan Bolton","gitLogLatestAuthorEmail":"github@thinknathan.com","gitLogLatestDate":"a minute ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null,"hideTitle":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c6724f00495b90d874d76e3cefffcee882b6c13a","date":"2024-08-12 05:18"}},"pageContext":{"id":"7fa676a6-3a75-5c00-b56b-eb1d2401ce7f","docs":true}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761"]}