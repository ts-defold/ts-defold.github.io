{"componentChunkName":"component---src-layouts-index-js","path":"/configuration/def-api","result":{"data":{"site":{"siteMetadata":{"title":"ts-defold","docsLocation":"https://github.com/ts-defold/ts-defold.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"fbe1e259-8260-5065-aec4-0dc4186b39eb","title":"Defold API","slug":"/configuration/def-api"},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Defold API\",\n  \"order\": 3\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Getting accurate types for the Defold API is an important part of `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), `. Here are some\nways to get the definitions you need:`), mdx(\"p\", null, `âœ¨ The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `types`), ` library is built-in into all `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` templates, and is automatically\npublished to keep up with the latest changes to Defold.`), mdx(\"p\", null, `ðŸŒŸ `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thinknathan/ts-defold-types\"\n  }, `TS-Defold Types II`), `\nis a drop-in alternative for the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `types`), ` library, with hand-written patches to provide for\nmore accurate and useful types.`), mdx(\"p\", null, `ðŸ’¥ `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/elMuso/defold-annotations-typescript/\"\n  }, `Defold Annotations for Typescript`), `\nIs a tool for generating types based on the Defold API, with more accurate types and better coverage\nof Lua features than the default `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `types`), `.`), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Working with Messages`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The Defold engine is built around communication using `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://defold.com/manuals/message-passing/\"\n  }, `messages`), `,\nso it helps to have accurate definitions of the built-in messages.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `ðŸŽ¶ `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thinknathan/tsd-util-types/tree/main/types\"\n  }, `Utility Types`), `\ninclude messages.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `ðŸ’¥ `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/elMuso/defold-annotations-typescript/\"\n  }, `Defold Annotations for Typescript`), `\ncan generate a definitions file with Defold's built-in messages.`)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Working with Vector Math`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `TypeScript doesn't have a built-in way to understand the resulting type of\nan operation involving vectors.`), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, `const result = go.get_position() + vmath.vector3(1, 1, 1); // type: number ?!??\n`)), mdx(\"p\", {\n    parentName: \"section\"\n  }, `If you're confident about the result, you can cast the type:`), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, `const result = (go.get_position() + vmath.vector3(1, 1, 1)) as vmath.vector3; // type: vmath.vector3\n`)), mdx(\"p\", {\n    parentName: \"section\"\n  }, `Or you can use the\n`, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://typescripttolua.github.io/docs/advanced/language-extensions#operator-map-types\"\n  }, `Operator Map Types`), `\nprovided by `, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `TSTL`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `TSTL`), ` - TypeScriptToLua Transpiler`), ` An extension to the TypeScript compiler that transpiles TypeScript code to Lua`))), ` to enable full type checking.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `ðŸŽ¶ `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thinknathan/tsd-util-types/blob/main/types/vmath.d.ts\"\n  }, `Utility Types`), `\ninclude all relevant vector math operations.`), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, `namespace vmath {\n    export const add: LuaAddition<vmath.vector3, vmath.vector3, vmath.vector3>;\n}\nconst result = vmath.add(go.get_position(), vmath.vector3(1, 1, 1)) // type: vmath.vector3\n`))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#working-with-messages","title":"Working with Messages"},{"url":"#working-with-vector-math","title":"Working with Vector Math"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"configuration/def-api.md","fields":{"gitLogLatestAuthorName":"Nathan Bolton","gitLogLatestAuthorEmail":"github@thinknathan.com","gitLogLatestDate":"a minute ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null,"hideTitle":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c6724f00495b90d874d76e3cefffcee882b6c13a","date":"2024-08-12 05:18"}},"pageContext":{"id":"fbe1e259-8260-5065-aec4-0dc4186b39eb","docs":true}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761"]}