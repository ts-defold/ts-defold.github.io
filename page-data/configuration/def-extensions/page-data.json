{"componentChunkName":"component---src-layouts-index-js","path":"/configuration/def-extensions","result":{"data":{"site":{"siteMetadata":{"title":"ts-defold","docsLocation":"https://github.com/ts-defold/ts-defold.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"ba8accce-5c3a-52db-8ef7-ec61c322ea1d","title":"Defold Extensions","slug":"/configuration/def-extensions"},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Defold Extensions\",\n  \"order\": 4\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Defold is a modular engine, with a ton of functionality available through\nLua libraries or `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://defold.com/manuals/extensions/\"\n  }, `native extensions`), `.`), mdx(\"p\", null, `Since every extension has its own unique API, they're tricky to use with\na strictly typed language like TypeScript. Here's how we handle it:`), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Library`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ts-defold/library\"\n  }, `@ts-defold/library`), ` contains user-submitted\ntypes for popular Defold extensions. The library is included in all `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` templates.\nInstall your preferred extensions in Defold, then type `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `npm run resolve`), ` to fetch\nthe matching types from the library.`)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Ext-Type-Gen`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thinknathan/tsd-ext-type-gen\"\n  }, `ext-type-gen`), ` tool can parse\nDefold native extensions that contain a `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://defold.com/manuals/extensions-script-api/\"\n  }, `script_api`), `,\nand generate types automagically.`)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Write Your Own`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `If all else fails, you can write your own types by hand, or ask an AI tool to help.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#library","title":"Library"},{"url":"#ext-type-gen","title":"Ext-Type-Gen"},{"url":"#write-your-own","title":"Write Your Own"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"configuration/def-extensions.md","fields":{"gitLogLatestAuthorName":"Nathan Bolton","gitLogLatestAuthorEmail":"github@thinknathan.com","gitLogLatestDate":"a minute ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null,"hideTitle":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c6724f00495b90d874d76e3cefffcee882b6c13a","date":"2024-08-12 05:18"}},"pageContext":{"id":"ba8accce-5c3a-52db-8ef7-ec61c322ea1d","docs":true}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761"]}