{"componentChunkName":"component---src-layouts-index-js","path":"/configuration/plugins","result":{"data":{"site":{"siteMetadata":{"title":"ts-defold","docsLocation":"https://github.com/ts-defold/ts-defold.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"a1b6768d-a7e6-5ff4-9cee-0ebed386e681","title":"Plugins","slug":"/configuration/plugins"},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Plugins\",\n  \"order\": 2\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://typescripttolua.github.io/docs/api/plugins\"\n  }, `TypeScriptToLua`), ` allows you to extend the transpiler's behavior and `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` uses this `, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `API`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `API`), ` - Application Programming Interface`), ` Computing interface which defines interactions between multiple software intermediaries`))), ` to bring some quality of life and necessary features to using TypeScript with Defold.`), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, `Export Globals`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thinknathan/tstl-export-to-global\"\n  }, `tstl-export-to-global`), `\nplugin is used to allow the export function to emulate the expected behavior of\n\"exports\" in a Defold game script.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `init`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_input`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_message`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `on_reload`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `update`), `, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `fixed_update`), `, and\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `final`), ` functions are executed on each game script by the Defold game engine.\nEach of those functions are expected to be defined in the file scope of the\ngame script for the game engine to execute them.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `To adhere to these requirements, the `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `tstl-export-to-global`)), ` plugin will hoist\nall exports to the global scope of the file.`), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, `{\n    \"name\": \"tstl-export-to-global\",\n    \"match\": \".*\\\\\\\\..*script.ts$\"\n}\n`)), mdx(\"p\", {\n    parentName: \"section\"\n  }, `By default this behavior is configured to only operate on `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.*script.ts`), ` files and\ncan be customized by modifying the `, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `RegEx`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `RegEx`), ` - Regular Expression`), ` A PCRE compatible Regular Expression statement`))), ` in the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `\"match\"`), ` configuration option.`)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `UserData Sugar`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ts-defold/tstl-userdata-sugar\"\n  }, `@ts-defold/userdata-sugar`), `\nplugin is used to allow the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `...`), ` spread operator syntax in array like objects\nused in the Defold `, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `API`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `API`), ` - Application Programming Interface`), ` Computing interface which defines interactions between multiple software intermediaries`))), `.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `Some of Defold's game objects are Lua UserData objects that define metamethods of\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `__index`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `__len`), ` that allow them to be treated like an array.  `), mdx(\"p\", {\n    parentName: \"section\"\n  }, ` Types defined as `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Array<T> & LuaUserdata`), ` in the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@ts-defold/types?activeTab=readme\"\n  }, `@ts-defold/types`), ` package\nare transformed to allow the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `...`), ` spread operator in arrays. This does not come\nwithout some cost though, so be certain you want to copy the array data and not\njust needlessly putting sugar on all the things.`)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Trim Extensions`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `The `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/thinknathan/ts-defold-tstl-trim-extensions\"\n  }, `tstl-trim-extensions`), `\nplugin is used to strip the \".lua\" extension from output files to fit Defold's naming convention.\nFor example, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `player.script.ts`), ` will become `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `player.script`), ` instead of `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `player.script.lua`), `.`)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, `Third-Party Plugins`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `You may find other useful `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/search?q=tstl%20plugin\"\n  }, `TSTL plugins on npm`), `.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#export-globals","title":"Export Globals"}]},{"url":"#userdata-sugar","title":"UserData Sugar"},{"url":"#trim-extensions","title":"Trim Extensions"},{"url":"#third-party-plugins","title":"Third-Party Plugins"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"configuration/plugins.md","fields":{"gitLogLatestAuthorName":"Nathan Bolton","gitLogLatestAuthorEmail":"github@thinknathan.com","gitLogLatestDate":"a minute ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null,"hideTitle":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c6724f00495b90d874d76e3cefffcee882b6c13a","date":"2024-08-12 05:18"}},"pageContext":{"id":"a1b6768d-a7e6-5ff4-9cee-0ebed386e681","docs":true}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761"]}