{"componentChunkName":"component---src-layouts-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"ts-defold","docsLocation":"https://github.com/ts-defold/ts-defold.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"9c7798ce-8162-51e1-9f27-cfd51fdd6664","title":"TypeScript :heart: Defold","slug":"/"},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"TypeScript :heart: Defold\",\n  \"metaTitle\": \"TypeScript + Defold\",\n  \"showMetadata\": false,\n  \"editable\": false,\n  \"showToc\": false,\n  \"hideTitle\": true\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst HeroImage = makeShortcode(\"HeroImage\");\nconst Tip = makeShortcode(\"Tip\");\nconst Layout = makeShortcode(\"Layout\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(HeroImage, {\n    src: \"/assets/logo-full.svg\",\n    width: \"300\",\n    height: \"300\",\n    mdxType: \"HeroImage\"\n  }), mdx(\"br\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` is an awesome TypeScript toolkit for leveling-up üçÑ\nyour `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://defold.com\"\n  }, `Defold`), ` game projects.`), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, `What `, mdx(\"strong\", {\n    parentName: \"h2\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` Offers üî•`), mdx(Tip, {\n    mdxType: \"Tip\"\n  }, \"ts-defold is open source and free -- forever!\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Writing your Defold game scripts in TypeScript, a statically-typed language`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Typings and auto-complete for the `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://defold.com/ref/stable/go/\"\n  }, `Defold API`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Project generator and project templates for a quick start`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `ESLint configured and ready to `, mdx(\"em\", {\n    parentName: \"li\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `lint`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `lint`)), ` Linting is the process of analyzing source code to find and fix programming errors, stylistic issues, and potential bugs`))), ` your code`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Prettier auto-formatting included`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Type generator that stays up to date with the Defold `, mdx(\"em\", {\n    parentName: \"li\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `API`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `API`), ` - Application Programming Interface`), ` Computing interface which defines interactions between multiple software intermediaries`)))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Library of types for Defold native extensions and Lua libraries`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Debugging with sourcemaps`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Visual Studio Code support`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `A friendly `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://discord.gg/eukcq5m\"\n  }, `community of developers`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `And more!`)))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, `Why TypeScript? ‚ú®`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `Defold uses Lua for its game scripting language, and it is an excellent choice!\nThe `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, `ts-defold`)), ` team loves Lua, and has worked with Lua for years. So why TypeScript?`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `TypeScript brings compile-time type-checking, generics, cutting-edge IDE support,\nbetter code maintainability, a familiar syntax, and a lot of other cool features.\nAfter spending 12+ years in the game industry, we have learned that the more errors\nand potential problems you can detect at compile-time over runtime, the faster you can iterate.\nAs your project grows, TypeScript will pay off in spades.`), mdx(\"p\", {\n    parentName: \"section\"\n  }, `Through the hard work of the `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://typescripttolua.github.io\"\n  }, `TypeScriptToLua`), ` project,\nwe have created a toolkit that generates reliable, trusted Lua code from TypeScript code for\nyour Defold game project. This means that you can reason about the generated code\nwith human eyes üëÄ, know that there is a greater community supporting the transpiler,\nand trust the 100s of tests that execute on the `, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", {\n    parentName: \"em\",\n    \"className\": \"jargon-term\"\n  }, `TSTL`, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"jargon-info\"\n  }, mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, `TSTL`), ` - TypeScriptToLua Transpiler`), ` An extension to the TypeScript compiler that transpiles TypeScript code to Lua`))), ` codebase.`)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-ts-defold-offers-fire","title":"What ts-defold Offers :fire:"},{"url":"#why-typescript-sparkles","title":"Why TypeScript? :sparkles:"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"index.mdx","fields":{"gitLogLatestAuthorName":"Nathan Bolton","gitLogLatestAuthorEmail":"github@thinknathan.com","gitLogLatestDate":"a minute ago"}},"frontmatter":{"metaTitle":"TypeScript + Defold","showMetadata":false,"editable":false,"showPreviousNext":null,"showToc":false,"hideTitle":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c6724f00495b90d874d76e3cefffcee882b6c13a","date":"2024-08-12 05:18"}},"pageContext":{"id":"9c7798ce-8162-51e1-9f27-cfd51fdd6664","docs":true}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761"]}